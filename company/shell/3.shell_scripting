1. 命令的退出状态 1), kw: EXIT STATUS)
    每一个命令都有一个退出状态，用一个非负的整数表示
    状态码0 表示命令运行没有出错
    非零状态码表示命令出错
    状态码的范围是0-255
    命令的退出状态常用于流程控制结构中的条件判断

2. 条件表达式 3), kw: CONDITIONAL EXPRESSIONS)
    复合命令 [[，内部命令 test 和 [，使用条件表达式来测试文件的属性和状态，做字符串比较和算术比较。
    形式一：[[ expression ]]
    形式二： [ expression ]
    形式三： test expression
    获取帮助信息：help [[, help test

3. 流程控制 3), kw: Compound Commands)
    if
    case
    while
    for
    continue, break

4. 函数 3), kw: FUNCTIONS)
    可以把函数想象成脚本中的小脚本。
    1. 代码重用
    2. 接受参数
    3. 有返回值
    4. local, return
    5. $0
    6. 函数库与source 命令
    7. 导出函数给子进程

5. 信号 2), kw: SIGNALS)
    1. kill
    2. trap

    CTRL-C  <-- 给前台进程组发SIGINT
    CTRL-Z  <-- 给前台进程组发SIGTSTP
    CTRL-\  <-- 给前台进程组发SIGQUIT
    CTRL-D  <-- 输出一个EOF 字符

6. 文本处理 12)
    1. 常用文本处理命令：
        cat head tail grep sed awk
        cut wc sort uniq tr tac rev
    2. 正则表达式
    3. 文本处理性能比较
        1. 搜索
        2. 替换
        3. 截取

7. 实例讲解 12)
    1. 脚本范例解析
    2. 脚本书写
        1. 命令行参数处理
        2. 运行环境检查（权限，标记等）
        3. 规范错误码
        4. 记录日志
        5. 模块化编程 （函数，变量，
        6. 代码对齐与代码风格
        7. 代码注释
        8. 代码性能
            1. 内部命令与外部命令的选择
            2. 并发，等待，同步
        9. 代码调试 bash -x, bash -n)
        10. 版本管理 git, svn, cvs)
    3. 项目示范
写一个程序，实现以下功能
1. 检查远程服务器上的httpd 服务是否正常工作，
   并记录检查结果
2. 提供增加，查看，修改，删除的功能
3. 只有root 用户才能写入检查记录，其他人可以查询
4. 避免多个进程同时写检查记录，
   如果出现写冲突，
   应该返回相应的错误码
5. 除了记录检查记录之外，程序还应该对每次运行，
   每次错误做记录
