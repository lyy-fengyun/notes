<?xml version="1.0" encoding="UTF-8"?>
<!-- Reference Manual http://logback.qos.ch/manual/index.html --> 
<!-- scan:当配置文件发生改变时，将会被重新加载，default==>true
	 scanPeriod:设置监测文件是否修改的时间间隔，如果没有给出时间 单位，default==>millinsecond
	 			scan=true，此属性生效。默认时间间隔 1分钟 。
	 debug： 为true时，打印logback内部日志，实时查重其运行状态。 default=false -->
<configuration scan="true" scanPeriod="36000" debug="true">    
	
	<!-- configuration下有三个子节点， appender，logger，root 
	     contextName：上下文名称，每个logger都关联到logger上下文，默认为 “default”,
	     	使用contextName设置名字，区分不同应用程序的记录，一旦设置，不能修改-->
	<contextName>logbackDemoInJava</contextName>
	
	<!-- 通过property可设置变量，name是变量名，value值是变量定义的值
		 可以通过${name}的形式使用变量 -->
	<property name="logbackDemo" value="mylogBackDemo" />
	
	<!-- key标识<timestamp>的名字，datePattern设置当前时间按配置的模板转换为字符串 -->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />
	
	<!-- 设置某一个包或者具体一个类的日志打印级别，以及指定<appender>. 
		<loger>只有一个name属性，一个可选的level和一个可选的addtivity属性。
		    可以包含0个或多个<appender-ref>元素，标识这个appender将会添加到这个日志中-->
	<loger name="test"></loger>



	<!-- appender负责写日志的组件，有两个必要的属性，name和class。
		name指定了appender的名称，class指定appender的全限定名 -->
	<appender name="stdout" 
		class="ch.qos.logback.core.ConsoleAppender">         
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator> 
            	<!--  defaults to type ch.qos.logback.classic.boolex.JaninoEventEvaluator-->
            	<expression>logger.contains("test")</expression>
           	</evaluator>            
           	<OnMismatch>NEUTRAL</OnMismatch>
            <OnMatch>DENY</OnMatch>        
		</filter>         
		
		<!-- encoder 对日志进行格式化， 默认配置为 PatternLayoutEncoder 
			target：字符串System.out 或者System.err 默认为System.out
			 -->
		<encoder charset="UTF-8">
       		<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>    
	</appender>    
	   
	 <!-- FileAppender 将日志添加到文件中。
	 		file 被写入的文件名，可以是相对目录，或绝对目录，当上级目录不存在时会自动创建。没有默认值
	 		append：如果是true，日志会被追加到文件结尾， 如果是false。清空现存文件 ，默认是true
	 		encoder：对记录事件 进行格式化。
	 		prudent：如果是true，日志会被安全的写入文件。效率低，默认 false-->
	 <!-- rollingFileAppender： 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。
	      rollingPolicy：当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。
	      triggeringPolicy：告知rollingFileAppender合适激活滚动。
	      prudent：为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，不过它
	      		不支持也不允许文件压缩，不能设置file属性，必须为空 -->
	    <!-- rollingPolicy：
	    		TimeBasedRollingPolicy：最常用，根据时间制定滚动策略，既负责滚动也负责触发滚动，有下如下几个子节点：
	    			fileNamePattern：必要，包含文件名及 “%d”转换符，“%d”可以包含一个
	    			java.text.SimpleDateFormat指定的时间格式。
	    		file子节点可有可无，通过设置file，可以为活动文件的归档文件指定不同的位置，当前日志总是记录到file指定的文件（活动文件），
	    		活动文件名字不会改变，如果没有设置file，活动文件 的名字会根据fileNamePattern的，每隔一段时间改变一次。
	    		maxHistory：可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件 。假设设置每个月滚动，且maxHistory是6，
	    		则只保存最近6个月的文件 ，删除之前的旧文件 。删除旧文件时，为了归档而创建的目录也会被删除。
	    		
	    		FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
				<minIndex>:窗口索引最小值
				<maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
				<fileNamePattern >:
				必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
	    		
	    		triggeringPolicy:
				SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
				<maxFileSize>:这是活动文件的大小，默认值是10MB。-->
    <appender name="RollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">        
        <file>java_test.log</file>         
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>        
        </filter>         
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            
	        <fileNamePattern>/syslog/java_test.%d{yyyy-MM-dd}..log.zip</fileNamePattern>            
	        <minIndex>1</minIndex>            
	        <maxIndex>3</maxIndex>        
        </rollingPolicy>         
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">           
        	<maxFileSize>5MB</maxFileSize>        
        </triggeringPolicy>         
        <encoder>            
         	<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>        
        </encoder>    
     </appender>     
	     
		<!-- root也是loger元素，但是它是根loger，只有一个level属性。
		level：用来设置打印级别，大小写无关，：trace，debug，info，warn，error，all，off
		不能设置为 inherited 或 null，  默认为debug
		可以包含0个或多个<appender-ref>元素，标识这个appender将会添加到这个日志中-->
     <root level="DEBUG">        
         <appender-ref ref="stdout" />        
         <appender-ref ref="RollingFile"/>    
     </root>	
</configuration> 
